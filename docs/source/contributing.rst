Contribuindo
============

Obrigado por considerar contribuir com o Minecraft Legends! Este guia ir√° ajud√°-lo a come√ßar.

Como Contribuir
---------------

Tipos de Contribui√ß√£o
^^^^^^^^^^^^^^^^^^^^^

Aceitamos diferentes tipos de contribui√ß√£o:

* **üêõ Bug Reports** - Reportar problemas encontrados
* **üí° Feature Requests** - Sugerir novas funcionalidades
* **üìù Documentation** - Melhorar documenta√ß√£o
* **üîß Code Changes** - Implementar melhorias
* **üß™ Testing** - Testar e validar funcionalidades
* **üé® UI/UX** - Melhorar interface do usu√°rio

Processo de Contribui√ß√£o
^^^^^^^^^^^^^^^^^^^^^^^^

#. **Fork** o reposit√≥rio
#. **Clone** seu fork localmente
#. **Crie** uma branch para sua feature
#. **Desenvolva** suas mudan√ßas
#. **Teste** suas altera√ß√µes
#. **Commit** suas mudan√ßas
#. **Push** para sua branch
#. **Abra** um Pull Request

Reportando Bugs
---------------

Template de Bug Report
^^^^^^^^^^^^^^^^^^^^^

Use o template de issue para bugs:

.. code-block:: markdown

   ## üêõ Bug Report
   
   **Descri√ß√£o do Bug**
   Uma descri√ß√£o clara e concisa do que aconteceu.
   
   **Para Reproduzir**
   Passos para reproduzir o comportamento:
   1. V√° para '...'
   2. Clique em '...'
   3. Role at√© '...'
   4. Veja o erro
   
   **Comportamento Esperado**
   Uma descri√ß√£o clara do que deveria acontecer.
   
   **Screenshots**
   Se aplic√°vel, adicione screenshots para ajudar a explicar o problema.
   
   **Ambiente:**
   - OS: [ex: Windows, macOS, Linux]
   - Python: [ex: 3.10.0]
   - Docker: [ex: 20.10.0]
   
   **Contexto Adicional**
   Adicione qualquer outro contexto sobre o problema aqui.

Informa√ß√µes Necess√°rias
^^^^^^^^^^^^^^^^^^^^^^^

Para bugs, inclua sempre:

* **Descri√ß√£o detalhada** do problema
* **Passos para reproduzir**
* **Comportamento esperado vs atual**
* **Screenshots** (se aplic√°vel)
* **Informa√ß√µes do ambiente**
* **Logs de erro** (se dispon√≠vel)

Sugerindo Features
------------------

Template de Feature Request
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: markdown

   ## üí° Feature Request
   
   **Problema que a feature resolve**
   Uma descri√ß√£o clara e concisa do problema que a feature resolve.
   
   **Descri√ß√£o da Solu√ß√£o**
   Uma descri√ß√£o clara e concisa do que voc√™ quer que aconte√ßa.
   
   **Alternativas Consideradas**
   Uma descri√ß√£o clara e concisa de quaisquer solu√ß√µes ou features alternativas que voc√™ considerou.
   
   **Contexto Adicional**
   Adicione qualquer outro contexto ou screenshots sobre a feature request aqui.

Crit√©rios para Features
^^^^^^^^^^^^^^^^^^^^^^^

Features devem:

* **Resolver um problema real** ou adicionar valor significativo
* **Ser bem documentadas** com casos de uso claros
* **Seguir os padr√µes** do projeto
* **Incluir testes** quando aplic√°vel
* **Ser compat√≠veis** com a arquitetura existente

Desenvolvimento
--------------

Configura√ß√£o do Ambiente
^^^^^^^^^^^^^^^^^^^^^^^^

#. **Fork e clone**::

   git clone https://github.com/SEU_USUARIO/2025.1-Minecraft.git
   cd 2025.1-Minecraft

#. **Configure o ambiente**::

   python -m venv venv
   source venv/bin/activate  # Linux/macOS
   pip install -r app/requirements.txt

#. **Inicie os containers**::

   docker-compose up -d

#. **Teste a instala√ß√£o**::

   python app/main.py

Criando uma Branch
^^^^^^^^^^^^^^^^^

Use branches descritivas:

.. code-block:: bash

   # Para novas features
   git checkout -b feat/nova-funcionalidade
   
   # Para corre√ß√µes
   git checkout -b fix/correcao-bug
   
   # Para documenta√ß√£o
   git checkout -b docs/melhorar-docs

Padr√µes de C√≥digo
-----------------

Estilo de C√≥digo
^^^^^^^^^^^^^^^^

Siga o PEP 8 para Python:

.. code-block:: python

   # ‚úÖ Bom
   def criar_personagem(nome: str, vida_max: int = 100) -> Optional[PlayerSession]:
       """Cria um novo personagem."""
       if not nome.strip():
           return None
       
       return PlayerSession(
           nome=nome,
           vida_max=vida_max,
           vida_atual=vida_max
       )
   
   # ‚ùå Ruim
   def criar_personagem(nome,vida_max=100):
       if nome=="":
           return None
       return PlayerSession(nome=nome,vida_max=vida_max,vida_atual=vida_max)

Documenta√ß√£o
^^^^^^^^^^^^

Use docstrings no formato Google:

.. code-block:: python

   def calcular_dano(base: int, modificador: float = 1.0) -> int:
       """Calcula o dano baseado em valores e modificadores.
       
       Args:
           base: Dano base do ataque
           modificador: Multiplicador de dano (padr√£o: 1.0)
       
       Returns:
           Dano final calculado
       
       Raises:
           ValueError: Se base for negativo
       
       Example:
           >>> calcular_dano(10, 1.5)
           15
       """
       if base < 0:
           raise ValueError("Dano base n√£o pode ser negativo")
       
       return int(base * modificador)

Tratamento de Erros
^^^^^^^^^^^^^^^^^^^

Use exce√ß√µes espec√≠ficas:

.. code-block:: python

   class PersonagemError(Exception):
       """Exce√ß√£o base para erros de personagem."""
       pass
   
   class NomeDuplicadoError(PersonagemError):
       """Exce√ß√£o para nomes duplicados."""
       pass
   
   def criar_personagem(nome: str) -> PlayerSession:
       if nome_existe(nome):
           raise NomeDuplicadoError(f"Nome '{nome}' j√° existe")
       
       # Cria√ß√£o do personagem...

Testes
------

Escrevendo Testes
^^^^^^^^^^^^^^^^

Crie testes para novas funcionalidades:

.. code-block:: python

   import pytest
   from utils.player_manager import PlayerSession, criar_personagem
   
   def test_criar_personagem_sucesso():
       """Testa cria√ß√£o bem-sucedida de personagem."""
       player = criar_personagem("Teste", 100)
       
       assert player is not None
       assert player.nome == "Teste"
       assert player.vida_max == 100
       assert player.vida_atual == 100
   
   def test_criar_personagem_nome_vazio():
       """Testa cria√ß√£o com nome vazio."""
       with pytest.raises(ValueError):
           criar_personagem("")
   
   def test_criar_personagem_nome_duplicado():
       """Testa cria√ß√£o com nome duplicado."""
       criar_personagem("Teste")
       
       with pytest.raises(NomeDuplicadoError):
           criar_personagem("Teste")

Executando Testes
^^^^^^^^^^^^^^^^

.. code-block:: bash

   # Instalar pytest
   pip install pytest pytest-cov
   
   # Executar todos os testes
   pytest
   
   # Com cobertura
   pytest --cov=app --cov-report=html
   
   # Testes espec√≠ficos
   pytest tests/test_player_manager.py

Commits
-------

Conven√ß√µes de Commit
^^^^^^^^^^^^^^^^^^^^

Use commits sem√¢nticos:

* **feat**: Nova funcionalidade
* **fix**: Corre√ß√£o de bug
* **docs**: Documenta√ß√£o
* **style**: Formata√ß√£o (espa√ßos, ponto e v√≠rgula, etc.)
* **refactor**: Refatora√ß√£o de c√≥digo
* **test**: Adicionando ou corrigindo testes
* **chore**: Tarefas de manuten√ß√£o

Exemplos:

.. code-block:: bash

   feat: add character deletion functionality
   fix: resolve duplicate session exit message
   docs: update installation guide
   style: fix indentation in display.py
   refactor: simplify player loading logic
   test: add tests for character creation
   chore: update dependencies

Mensagens de Commit
^^^^^^^^^^^^^^^^^^

* Use o imperativo ("add" n√£o "added")
* Primeira linha com m√°ximo 50 caracteres
* Descri√ß√£o detalhada ap√≥s linha em branco
* Referencie issues quando aplic√°vel

.. code-block:: bash

   feat: add character deletion functionality
   
   - Add delete_player function to player_manager
   - Add confirmation dialog for deletion
   - Prevent deletion of active character
   - Add tests for deletion functionality
   
   Closes #123

Pull Requests
-------------

Criando um PR
^^^^^^^^^^^^

#. **Atualize** sua branch com a main::

   git checkout main
   git pull origin main
   git checkout sua-branch
   git rebase main

#. **Teste** suas mudan√ßas::

   python -m pytest
   python app/main.py

#. **Push** suas mudan√ßas::

   git push origin sua-branch

#. **Abra o PR** no GitHub

Template de PR
^^^^^^^^^^^^^

.. code-block:: markdown

   ## üìù Descri√ß√£o
   
   Breve descri√ß√£o das mudan√ßas implementadas.
   
   ## üîó Issue Relacionada
   
   Closes #123
   
   ## üß™ Testes
   
   - [ ] Testes unit√°rios passando
   - [ ] Testes de integra√ß√£o passando
   - [ ] Funcionalidade testada manualmente
   
   ## üì∏ Screenshots
   
   Se aplic√°vel, adicione screenshots das mudan√ßas.
   
   ## ‚úÖ Checklist
   
   - [ ] C√≥digo segue os padr√µes do projeto
   - [ ] Documenta√ß√£o atualizada
   - [ ] Testes adicionados/atualizados
   - [ ] Commits seguem conven√ß√µes
   - [ ] PR est√° atualizado com a main

Revis√£o de C√≥digo
-----------------

Crit√©rios de Revis√£o
^^^^^^^^^^^^^^^^^^^^

* **Funcionalidade**: O c√≥digo faz o que deveria?
* **Qualidade**: O c√≥digo est√° bem escrito?
* **Testes**: H√° testes adequados?
* **Documenta√ß√£o**: Est√° bem documentado?
* **Performance**: H√° problemas de performance?
* **Seguran√ßa**: H√° vulnerabilidades?

Coment√°rios de Revis√£o
^^^^^^^^^^^^^^^^^^^^^^

Seja construtivo:

.. code-block:: markdown

   ‚úÖ **Positivo**: "Boa implementa√ß√£o! O c√≥digo est√° claro e bem estruturado."
   
   üîß **Sugest√£o**: "Considere usar uma valida√ß√£o mais espec√≠fica aqui."
   
   ‚ùå **Problema**: "Esta fun√ß√£o pode causar problemas de performance com muitos dados."
   
   üí° **Idea**: "Que tal implementar cache para melhorar performance?"

Documenta√ß√£o
------------

Atualizando Documenta√ß√£o
^^^^^^^^^^^^^^^^^^^^^^^

Para mudan√ßas que afetam a documenta√ß√£o:

#. **Atualize** os arquivos .rst relevantes
#. **Gere** a documenta√ß√£o::

   cd docs
   make html

#. **Verifique** se est√° correto::

   open build/html/index.html

#. **Commit** as mudan√ßas::

   git add docs/
   git commit -m "docs: update API documentation"

Estrutura de Documenta√ß√£o
^^^^^^^^^^^^^^^^^^^^^^^^^

* **installation.rst**: Guias de instala√ß√£o
* **quickstart.rst**: In√≠cio r√°pido
* **user_guide.rst**: Guia do usu√°rio
* **api_reference.rst**: Documenta√ß√£o da API
* **database.rst**: Estrutura do banco
* **development.rst**: Guia de desenvolvimento
* **contributing.rst**: Este guia

Comunica√ß√£o
-----------

Canais de Comunica√ß√£o
^^^^^^^^^^^^^^^^^^^^^

* **GitHub Issues**: Para bugs e features
* **GitHub Discussions**: Para discuss√µes gerais
* **Pull Requests**: Para contribui√ß√µes de c√≥digo
* **Email**: Para assuntos privados

C√≥digo de Conduta
^^^^^^^^^^^^^^^^^

* Seja respeitoso e inclusivo
* Foque no c√≥digo, n√£o na pessoa
* Seja construtivo em feedback
* Ajude outros contribuidores
* Respeite diferentes pontos de vista

Reconhecimento
--------------

Contribuidores
^^^^^^^^^^^^^

Todos os contribuidores s√£o reconhecidos:

* No arquivo CONTRIBUTORS.md
* Na documenta√ß√£o
* Nos releases do GitHub
* No README do projeto

Como Ser Reconhecido
^^^^^^^^^^^^^^^^^^^^

* Contribui√ß√µes significativas de c√≥digo
* Melhorias importantes na documenta√ß√£o
* Reportes de bugs cr√≠ticos
* Sugest√µes de features implementadas
* Ajuda na comunidade

Pr√≥ximos Passos
---------------

Agora que voc√™ conhece como contribuir:

#. **Escolha** uma issue para trabalhar
#. **Configure** seu ambiente de desenvolvimento
#. **Desenvolva** sua contribui√ß√£o
#. **Teste** suas mudan√ßas
#. **Abra** um Pull Request

Obrigado por contribuir com o Minecraft Legends! üéÆ

Para mais informa√ß√µes:

* :doc:`development` - Guia de desenvolvimento
* :doc:`api_reference` - Documenta√ß√£o da API
* :doc:`database` - Estrutura do banco 