Desenvolvimento
==============

Este guia ir√° ajud√°-lo a configurar o ambiente de desenvolvimento e entender a arquitetura do projeto.

Estrutura do Projeto
--------------------

.. code-block:: text

   2025.1-Minecraft/
   ‚îú‚îÄ‚îÄ app/                          # Aplica√ß√£o principal
   ‚îÇ   ‚îú‚îÄ‚îÄ main.py                   # Ponto de entrada
   ‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile                # Container da aplica√ß√£o
   ‚îÇ   ‚îú‚îÄ‚îÄ requirements.txt          # Depend√™ncias Python
   ‚îÇ   ‚îî‚îÄ‚îÄ src/                      # C√≥digo fonte
   ‚îÇ       ‚îú‚îÄ‚îÄ interface/            # Interface do usu√°rio
   ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ display.py        # Menus e exibi√ß√£o
   ‚îÇ       ‚îî‚îÄ‚îÄ utils/                # Utilit√°rios
   ‚îÇ           ‚îú‚îÄ‚îÄ player_manager.py # Gerenciamento de personagens
   ‚îÇ           ‚îî‚îÄ‚îÄ db_helpers.py     # Helpers do banco de dados
   ‚îú‚îÄ‚îÄ db/                           # Banco de dados
   ‚îÇ   ‚îú‚îÄ‚îÄ ddl.sql                   # Defini√ß√£o das tabelas
   ‚îÇ   ‚îú‚îÄ‚îÄ dml.sql                   # Dados iniciais
   ‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile.db             # Container do banco
   ‚îÇ   ‚îî‚îÄ‚îÄ create_user.sql           # Cria√ß√£o de usu√°rios
   ‚îú‚îÄ‚îÄ docs/                         # Documenta√ß√£o
   ‚îÇ   ‚îú‚îÄ‚îÄ source/                   # Arquivos fonte do Sphinx
   ‚îÇ   ‚îî‚îÄ‚îÄ build/                    # Documenta√ß√£o gerada
   ‚îú‚îÄ‚îÄ docker-compose.yml            # Orquestra√ß√£o dos containers
   ‚îî‚îÄ‚îÄ README.md                     # Documenta√ß√£o principal

Arquitetura
-----------

Padr√£o de Arquitetura
^^^^^^^^^^^^^^^^^^^^^

O projeto segue uma arquitetura modular com separa√ß√£o clara de responsabilidades:

* **Interface Layer** (``interface/display.py``)
  * Menus e intera√ß√£o com usu√°rio
  * Valida√ß√£o de entrada
  * Formata√ß√£o de sa√≠da

* **Business Logic Layer** (``utils/player_manager.py``)
  * L√≥gica de neg√≥cio
  * Gerenciamento de estado
  * Opera√ß√µes de personagens

* **Data Access Layer** (``utils/db_helpers.py``)
  * Conex√£o com banco de dados
  * Execu√ß√£o de queries
  * Inicializa√ß√£o do banco

* **Data Layer** (``db/``)
  * Scripts SQL
  * Configura√ß√£o do banco
  * Dados iniciais

Fluxo de Dados
^^^^^^^^^^^^^

.. image:: _static/architecture-flow.png
   :alt: Fluxo de Dados
   :align: center

1. **Interface** recebe entrada do usu√°rio
2. **Business Logic** processa a l√≥gica
3. **Data Access** executa opera√ß√µes no banco
4. **Interface** exibe resultados

Configura√ß√£o do Ambiente
------------------------

Pr√©-requisitos
^^^^^^^^^^^^^

* Python 3.10+
* Docker e Docker Compose
* Git
* Editor de c√≥digo (VS Code, PyCharm, etc.)

Configura√ß√£o Local
^^^^^^^^^^^^^^^^^

#. Clone o reposit√≥rio::

   git clone https://github.com/SBD1/2025.1-Minecraft.git
   cd 2025.1-Minecraft

#. Configure o ambiente virtual::

   python -m venv venv
   source venv/bin/activate  # Linux/macOS
   # ou
   venv\Scripts\activate     # Windows

#. Instale depend√™ncias::

   pip install -r app/requirements.txt

#. Inicie os containers::

   docker-compose up -d

#. Execute o jogo::

   python app/main.py

Desenvolvimento com Docker
^^^^^^^^^^^^^^^^^^^^^^^^^

Para desenvolvimento dentro do container:

#. Acesse o container::

   docker exec -it python_mine bash

#. Instale depend√™ncias de desenvolvimento::

   pip install sphinx sphinx-rtd-theme

#. Execute o jogo::

   python main.py

Estrutura do C√≥digo
-------------------

M√≥dulo player_manager
^^^^^^^^^^^^^^^^^^^^

Respons√°vel pelo gerenciamento de personagens:

.. code-block:: python

   # Vari√°vel global para personagem ativo
   current_player: Optional[PlayerSession] = None
   
   # Classe principal
   @dataclass
   class PlayerSession:
       # Atributos do personagem
   
   # Fun√ß√µes de gerenciamento
   def set_current_player(player_data: PlayerSession) -> None:
       """Define o personagem ativo"""
   
   def get_current_player() -> Optional[PlayerSession]:
       """Retorna o personagem ativo"""
   
   def load_player_by_id(player_id: int) -> Optional[PlayerSession]:
       """Carrega personagem do banco"""

M√≥dulo db_helpers
^^^^^^^^^^^^^^^^

Gerencia conex√µes e opera√ß√µes do banco:

.. code-block:: python

   def connection_db():
       """Cria conex√£o com PostgreSQL"""
   
   def setup_database():
       """Configura banco antes da execu√ß√£o"""
   
   def check_tables_exist():
       """Verifica se tabelas existem"""
   
   def initialize_database():
       """Inicializa estrutura e dados"""

M√≥dulo display
^^^^^^^^^^^^^

Interface do usu√°rio e menus:

.. code-block:: python

   def menu_inicial():
       """Menu principal do jogo"""
   
   def criar_jogador():
       """Interface de cria√ß√£o de personagem"""
   
   def listar_jogadores():
       """Lista personagens em grid"""
   
   def sair_jogo():
       """Encerra o jogo"""

Padr√µes de C√≥digo
-----------------

Conven√ß√µes de Nomenclatura
^^^^^^^^^^^^^^^^^^^^^^^^^^

* **Fun√ß√µes**: snake_case (``criar_jogador``)
* **Vari√°veis**: snake_case (``current_player``)
* **Classes**: PascalCase (``PlayerSession``)
* **Constantes**: UPPER_CASE (``MAX_LIFE``)
* **M√≥dulos**: snake_case (``player_manager``)

Documenta√ß√£o
^^^^^^^^^^^^

Use docstrings no formato Google:

.. code-block:: python

   def criar_personagem(nome: str, vida_max: int = 100) -> Optional[PlayerSession]:
       """Cria um novo personagem no banco de dados.
       
       Args:
           nome: Nome √∫nico do personagem
           vida_max: Vida m√°xima (padr√£o: 100)
       
       Returns:
           PlayerSession do personagem criado ou None se erro
       
       Raises:
           ValueError: Se nome for inv√°lido
       """

Tratamento de Erros
^^^^^^^^^^^^^^^^^^^

Use try/except com mensagens espec√≠ficas:

.. code-block:: python

   try:
       conn = connection_db()
       # Opera√ß√µes
   except psycopg2.Error as e:
       print(f"‚ùå Erro de banco: {e}")
   except Exception as e:
       print(f"‚ùå Erro inesperado: {e}")
   finally:
       conn.close()

Valida√ß√£o de Dados
^^^^^^^^^^^^^^^^^^

Valide sempre as entradas:

.. code-block:: python

   def validar_nome(nome: str) -> bool:
       """Valida nome do personagem"""
       if not nome or not nome.strip():
           return False
       if len(nome) > 100:
           return False
       return True

Testes
------

Estrutura de Testes
^^^^^^^^^^^^^^^^^^

Crie testes para fun√ß√µes cr√≠ticas:

.. code-block:: python

   def test_criar_personagem():
       """Testa cria√ß√£o de personagem"""
       player = create_new_player("Teste", 100, 10)
       assert player is not None
       assert player.nome == "Teste"
       assert player.vida_max == 100

   def test_validar_nome():
       """Testa valida√ß√£o de nome"""
       assert validar_nome("Jo√£o") == True
       assert validar_nome("") == False
       assert validar_nome("   ") == False

Executando Testes
^^^^^^^^^^^^^^^^

.. code-block:: bash

   # Instalar pytest
   pip install pytest
   
   # Executar testes
   pytest tests/
   
   # Com cobertura
   pytest --cov=app tests/

Debugging
---------

Logs
^^^^

Use prints informativos para debug:

.. code-block:: python

   print(f"üîç Debug: Criando personagem '{nome}'")
   print(f"üîç Debug: Dados salvos: {player.to_dict()}")

Debug no Container
^^^^^^^^^^^^^^^^^

.. code-block:: bash

   # Acessar container
   docker exec -it python_mine bash
   
   # Executar com debug
   python -u main.py
   
   # Ver logs
   docker-compose logs app

Debug no VS Code
^^^^^^^^^^^^^^^

Configure o launch.json:

.. code-block:: json

   {
       "version": "0.2.0",
       "configurations": [
           {
               "name": "Python: Minecraft",
               "type": "python",
               "request": "launch",
               "program": "${workspaceFolder}/app/main.py",
               "console": "integratedTerminal",
               "cwd": "${workspaceFolder}/app"
           }
       ]
   }

Deploy e CI/CD
--------------

GitHub Actions
^^^^^^^^^^^^^

Configure workflows para:

* **Testes autom√°ticos**
* **Build da documenta√ß√£o**
* **Deploy no GitHub Pages**

.. code-block:: yaml

   name: Build Documentation
   on: [push, pull_request]
   jobs:
     build:
       runs-on: ubuntu-latest
       steps:
         - uses: actions/checkout@v2
         - name: Set up Python
           uses: actions/setup-python@v2
           with:
             python-version: 3.10
         - name: Install dependencies
           run: |
             pip install sphinx sphinx-rtd-theme
         - name: Build docs
           run: |
             cd docs
             make html

Deploy Autom√°tico
^^^^^^^^^^^^^^^^^

Configure deploy autom√°tico no GitHub Pages:

.. code-block:: yaml

   name: Deploy to GitHub Pages
   on:
     push:
       branches: [ main ]
   jobs:
     deploy:
       runs-on: ubuntu-latest
       steps:
         - uses: actions/checkout@v2
         - name: Deploy
           uses: peaceiris/actions-gh-pages@v3
           with:
             github_token: ${{ secrets.GITHUB_TOKEN }}
             publish_dir: ./docs/build/html

Versionamento
-------------

Semantic Versioning
^^^^^^^^^^^^^^^^^^

Use o padr√£o MAJOR.MINOR.PATCH:

* **MAJOR**: Mudan√ßas incompat√≠veis
* **MINOR**: Novas funcionalidades
* **PATCH**: Corre√ß√µes de bugs

Changelog
^^^^^^^^^

Mantenha um CHANGELOG.md:

.. code-block:: markdown

   # Changelog
   
   ## [1.1.0] - 2025-01-XX
   ### Added
   - Sistema de grid para lista de personagens
   - Op√ß√£o de deletar personagens
   
   ### Changed
   - Melhorada interface de sele√ß√£o
   
   ### Fixed
   - Corre√ß√£o de mensagens duplicadas

Commits
^^^^^^^

Use commits sem√¢nticos:

* **feat**: Nova funcionalidade
* **fix**: Corre√ß√£o de bug
* **docs**: Documenta√ß√£o
* **style**: Formata√ß√£o
* **refactor**: Refatora√ß√£o
* **test**: Testes
* **chore**: Tarefas de manuten√ß√£o

Exemplo: ``feat: add character deletion functionality``

Pr√≥ximos Passos
---------------

Para continuar o desenvolvimento:

* :doc:`contributing` - Guia de contribui√ß√£o
* :doc:`api_reference` - Documenta√ß√£o da API
* :doc:`database` - Estrutura do banco 